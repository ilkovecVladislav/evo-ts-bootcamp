{"version":3,"sources":["reducer.ts","store.ts","App.tsx","selectors.ts","index.tsx"],"names":["UPDATE_BALANCE","CREDIT","SUBTRACT_PERCENTAGE","DEBIT","initialState","balance","updateBalance","value","type","payload","credit","subtractPercentage","debit","reducer","state","action","currentBalance","result","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","undefined","App","useSelector","dispatch","useDispatch","useState","setValue","useEffect","className","onSubmit","event","preventDefault","newBalance","Number","isNaN","onChange","target","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAAMA,EAAiB,iBACjBC,EAAS,SACTC,EAAsB,sBACtBC,EAAQ,QAMRC,EAAe,CACnBC,QAAS,GAyBLC,EAAgB,SAACC,GAAD,MAAmC,CACvDC,KAAMR,EACNS,QAASF,IAGLG,EAAS,SAACH,GAAD,MAA4B,CACzCC,KAAMP,EACNQ,QAASF,IAGLI,EAAqB,SAACJ,GAAD,MAAwC,CACjEC,KAAMN,EACNO,QAASF,IAGLK,EAAQ,SAACL,GAAD,MAA2B,CACvCC,KAAML,EACNM,QAASF,IA0BIM,EAvBC,WAAkD,IAAjDC,EAAgD,uDAAxCV,EAAcW,EAA0B,uCAC/D,OAAQA,EAAOP,MACb,KAAKR,EACH,OAAO,2BAAKc,GAAZ,IAAmBT,QAASU,EAAON,UAErC,KAAKR,EACH,OAAO,2BAAKa,GAAZ,IAAmBT,QAASS,EAAMT,QAAUU,EAAON,UAErD,KAAKN,EACH,OAAO,2BAAKW,GAAZ,IAAmBT,QAASS,EAAMT,QAAUU,EAAON,UAErD,KAAKP,EACH,IAAMc,EAAiBF,EAAMT,QACvBY,EAASD,GAAkB,EAAID,EAAON,QAAU,KAEtD,OAAO,2BAAKK,GAAZ,IAAmBT,QAASY,IAG9B,QACE,OAAOH,ICjEPI,EAAmBC,OAAOC,sCAAwCC,IAKzDC,EAJDC,YAAYC,OAAaC,EAAWP,K,8BCmDnCQ,MAtDf,WACE,IAAMrB,ECHNsB,aAAY,SAACb,GAAD,OAAsBA,EAAMT,WDIlCuB,EAAWC,cAFJ,EAGaC,mBAAS,IAHtB,mBAGNvB,EAHM,KAGCwB,EAHD,KAqCb,OAPAC,qBAAU,WACRJ,EAAStB,EAAc,MACvBsB,EAASlB,EAAO,MAChBkB,EAAShB,EAAM,KACfgB,EAASjB,EAAmB,OAC3B,CAACiB,IAGF,sBAAKK,UAAU,MAAf,UACE,mDAAsB5B,KACtB,uBAAM6B,SA/BqB,SAACC,GAC9BA,EAAMC,iBACN,IAAMC,EAAaC,OAAO/B,GACrB+B,OAAOC,MAAMF,KAChBT,EAAStB,EAAc+B,IACvBN,EAAS,MA0BT,UACE,iDACA,uBAAOvB,KAAK,SAASD,MAAOA,EAAOiC,SArCpB,SAACL,GACpBJ,EAASI,EAAMM,OAAOlC,UAqClB,wBAAQC,KAAK,SAAb,4BAEF,uBAEA,wBAAQkC,QA7BS,WACnBd,EAASlB,EAAO,OA4Bd,oBACA,wBAAQgC,QA1BQ,WAClBd,EAAShB,EAAM,MAyBb,mBACA,wBAAQ8B,QAvBM,WAChBd,EAASjB,EAAmB,MAsB1B,qBEhDNgC,IAASC,OACP,cAAC,IAAD,CAAUtB,MAAOA,EAAjB,SACE,cAAC,IAAMuB,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.334d3733.chunk.js","sourcesContent":["const UPDATE_BALANCE = \"UPDATE_BALANCE\";\nconst CREDIT = \"CREDIT\";\nconst SUBTRACT_PERCENTAGE = \"SUBTRACT_PERCENTAGE\";\nconst DEBIT = \"DEBIT\";\n\ntype State = {\n  balance: number;\n};\n\nconst initialState = {\n  balance: 0,\n};\n\ntype UpdateBalance = {\n  type: typeof UPDATE_BALANCE;\n  payload: number;\n};\n\ntype Credit = {\n  type: typeof CREDIT;\n  payload: number;\n};\n\ntype SubtractPercentage = {\n  type: typeof SUBTRACT_PERCENTAGE;\n  payload: number;\n};\n\ntype Debit = {\n  type: typeof DEBIT;\n  payload: number;\n};\n\ntype Action = UpdateBalance | Credit | SubtractPercentage | Debit;\n\nconst updateBalance = (value: number): UpdateBalance => ({\n  type: UPDATE_BALANCE,\n  payload: value,\n});\n\nconst credit = (value: number): Credit => ({\n  type: CREDIT,\n  payload: value,\n});\n\nconst subtractPercentage = (value: number): SubtractPercentage => ({\n  type: SUBTRACT_PERCENTAGE,\n  payload: value,\n});\n\nconst debit = (value: number): Debit => ({\n  type: DEBIT,\n  payload: value,\n});\n\nconst reducer = (state = initialState, action: Action): State => {\n  switch (action.type) {\n    case UPDATE_BALANCE: {\n      return { ...state, balance: action.payload };\n    }\n    case CREDIT: {\n      return { ...state, balance: state.balance - action.payload };\n    }\n    case DEBIT: {\n      return { ...state, balance: state.balance + action.payload };\n    }\n    case SUBTRACT_PERCENTAGE: {\n      const currentBalance = state.balance;\n      const result = currentBalance * (1 - action.payload / 100);\n\n      return { ...state, balance: result };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nexport { updateBalance, credit, subtractPercentage, debit };\n","import { createStore, compose } from \"redux\";\n\nimport rootReducer from \"./reducer\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, undefined, composeEnhancers());\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default store;\n","import { ChangeEvent, FormEvent, useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { useBalance } from \"./selectors\";\nimport { updateBalance, credit, subtractPercentage, debit } from \"./reducer\";\nimport \"./App.css\";\n\nfunction App() {\n  const balance = useBalance();\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(\"\");\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  const handleSubmitNewBalance = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const newBalance = Number(value);\n    if (!Number.isNaN(newBalance)) {\n      dispatch(updateBalance(newBalance));\n      setValue(\"\");\n    }\n  };\n\n  const handleCredit = () => {\n    dispatch(credit(200));\n  };\n\n  const handleDebit = () => {\n    dispatch(debit(50));\n  };\n\n  const handleTax = () => {\n    dispatch(subtractPercentage(14));\n  };\n\n  useEffect(() => {\n    dispatch(updateBalance(1000));\n    dispatch(credit(200));\n    dispatch(debit(50));\n    dispatch(subtractPercentage(14));\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <h1>Current balance: {balance}</h1>\n      <form onSubmit={handleSubmitNewBalance}>\n        <h3>Set new balance</h3>\n        <input type=\"number\" value={value} onChange={handleChange} />\n        <button type=\"submit\">Set Balance</button>\n      </form>\n      <hr />\n\n      <button onClick={handleCredit}>Credit</button>\n      <button onClick={handleDebit}>Debit</button>\n      <button onClick={handleTax}>Tax</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { useSelector } from \"react-redux\";\n\nimport { RootState } from \"./store\";\n\nexport const useBalance = () =>\n  useSelector((state: RootState) => state.balance);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}